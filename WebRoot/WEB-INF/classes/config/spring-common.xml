<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:mvc="http://www.springframework.org/schema/mvc"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xmlns:jee="http://www.springframework.org/schema/jee"  
       xsi:schemaLocation="  
            http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx.xsd  
            http://www.springframework.org/schema/jee  
            http://www.springframework.org/schema/jee/spring-tx.xsd">  

	<!-- 加入Aspectj配置 -->    
	
    <aop:aspectj-autoproxy />    
        
    <!-- 选题业务逻辑对象，这是连接点 -->
    <bean class="com.tgb.service.impl.XuanTiServiceImpl" />
    <bean class="com.tgb.service.impl.BookServiceImpl" />    
    
    <!-- 日志 AOP -->
    <bean id="logAspect" class="com.tgb.utils.LogAspect" />
    
    <!-- 日志记录业务逻辑对象 -->
    <bean id="LogService" class="com.tgb.service.impl.LogServiceImpl" />
    
    <!-- 加入Aspectj配置：结束 -->      
    
    <!-- 扫描指定包（将 @Component 注解的类自动定义为 Spring Bean） -->    
    <!-- <context:component-scan base-package="com.tgb.service" /> -->
    <!-- <context:component-scan base-package="com.tgb.service.impl" /> -->
    
    <!-- enable autowire -->
    <context:annotation-config />

	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3309/publisher?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<!--
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源
		MyBatis定义数据源,同意加载配置
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:config/mybatis-config.xml" /> <!-- 加载mybatis配置 -->
	</bean>

	<!--
		3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory
		basePackage:指定sql映射文件/接口所在的包（自动扫描）
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tgb.mapper"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>		
	</bean>

	<!--
		4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
	-->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 
		5. 使用声明式事务
		transaction-manager：引用上面定义的事务管理器
	-->
	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />

</beans>
